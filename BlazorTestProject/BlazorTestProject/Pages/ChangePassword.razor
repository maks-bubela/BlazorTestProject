@page "/changepassword"
@using BlazorTestProject.Models.Models
@using BlazorTestProject.Interfaces
@inject IUserApiService _userApiService
@using System.Net
@using BlazorTestProject.Providers
@inject AuthStateProvider authStateProvider
<AuthorizeView Context="authStateProvider">
    <Authorized>
        <h3>Change Password</h3>
        <EditForm Model="changePasswordModel" OnValidSubmit="ChangePass" class="card card-body bg-light mt-5">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <label for="password" class="col-md-2 col-form-label">Current Password:</label>
                <div class="col-md-10">
                    <InputText type="password" id="password" class="form-control" @bind-Value="changePasswordModel.NowPassword" />
                    <ValidationMessage For="@(() => changePasswordModel.NowPassword)" />
                </div>
            </div>
            <div class="form-group row">
                <label for="password" class="col-md-2 col-form-label">New Password:</label>
                <div class="col-md-10">
                    <InputText type="password" id="password" class="form-control" @bind-Value="changePasswordModel.Password" />
                    <ValidationMessage For="@(() => changePasswordModel.Password)" />
                </div>
            </div>
            <div class="form-group row">
                <label for="repassword" class="col-md-2 col-form-label">Repeat new password:</label>
                <div class="col-md-10">
                    <InputText type="password" id="repassword" class="form-control" @bind-Value="changePasswordModel.RePassword" />
                    <ValidationMessage For="@(() => changePasswordModel.RePassword)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 text-right">
                    <button type="submit" class="btn btn-success">Change password</button>
                </div>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <SignIn/>
    </NotAuthorized>
</AuthorizeView>
<p><b>@statusChangePass</b><br></p>


@code {
    #region Models
    private ChangePasswordModel changePasswordModel = new ChangePasswordModel();
    #endregion
    private static string statusChangePass = "";
    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
    }

    private async Task ChangePass()
    {
        var response = await _userApiService.ChangePass(changePasswordModel);
        if (response.StatusCode == HttpStatusCode.OK)
        {
            statusChangePass = "Password is successful changed";
        }
        else
            statusChangePass = "Incorect password!";
        await OnInitializedAsync();
    }
}
